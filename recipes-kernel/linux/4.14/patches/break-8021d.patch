################################################################################
SHORT DESCRIPTION: 
################################################################################
Allow to selectively pass layer 2 frames from the "Bridge Filtered MAC Group"
in violation of 802.1d.

################################################################################
LONG DESCRIPTION: 
################################################################################
Allow guests to do 802.1X / EAPOL authentication across the wired bridge
(brbridge) in dom0 or the NDVM in the case of OpenXT.

This patch will not have an effect if STP is enabled on a bridge.
It includes a sysfs entry for each bridge to allow the code to be
selectively enabled.

################################################################################
CHANGELOG 
################################################################################
Original Author: Philip Tricca <philip.tricca@citrix.com>
Port to 3.18: Eric Chanudet <chanudete@ainfosec.com>
Port to 4.14: Richard Turner <turnerr@ainfosec.com>

################################################################################
REMOVAL 
################################################################################
Removal will disable guest capability to do 802.1X/EAPOL authentification
across NDVM's bridge.

################################################################################
UPSTREAM PLAN
################################################################################
None.

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
Required for 802.1X/EAPOL auth across NDVM's bridge.

################################################################################
PATCHES 
################################################################################
Index: 4.14.5/net/bridge/br_if.c
===================================================================
--- 4.14.5.orig/net/bridge/br_if.c
+++ 4.14.5/net/bridge/br_if.c
@@ -379,6 +379,7 @@ static struct net_bridge_port *new_nbp(s
 int br_add_bridge(struct net *net, const char *name)
 {
 	struct net_device *dev;
+	struct net_bridge *br;
 	int res;
 
 	dev = alloc_netdev(sizeof(struct net_bridge), name, NET_NAME_UNKNOWN,
@@ -387,6 +388,9 @@ int br_add_bridge(struct net *net, const
 	if (!dev)
 		return -ENOMEM;
 
+	br = netdev_priv(dev);
+	br->break_8021d = 0;
+
 	dev_net_set(dev, net);
 	dev->rtnl_link_ops = &br_link_ops;
 
Index: 4.14.5/net/bridge/br_input.c
===================================================================
--- 4.14.5.orig/net/bridge/br_input.c
+++ 4.14.5/net/bridge/br_input.c
@@ -293,7 +293,8 @@ rx_handler_result_t br_handle_frame(stru
 		case 0x00:	/* Bridge Group Address */
 			/* If STP is turned off,
 			   then must forward to keep loop detection */
-			if (p->br->stp_enabled == BR_NO_STP ||
+			if ((p->br->stp_enabled == BR_NO_STP &&
+                             p->br->break_8021d) ||
 			    fwd_mask & (1u << dest[5]))
 				goto forward;
 			*pskb = skb;
Index: 4.14.5/net/bridge/br_private.h
===================================================================
--- 4.14.5.orig/net/bridge/br_private.h
+++ 4.14.5/net/bridge/br_private.h
@@ -386,6 +386,8 @@ struct net_bridge {
 #endif /* IS_ENABLED(CONFIG_IPV6) */
 #endif
 
+	u8				break_8021d;
+
 	struct timer_list		hello_timer;
 	struct timer_list		tcn_timer;
 	struct timer_list		topology_change_timer;
Index: 4.14.5/net/bridge/br_sysfs_br.c
===================================================================
--- 4.14.5.orig/net/bridge/br_sysfs_br.c
+++ 4.14.5/net/bridge/br_sysfs_br.c
@@ -827,6 +827,36 @@ static ssize_t vlan_stats_enabled_store(
 static DEVICE_ATTR_RW(vlan_stats_enabled);
 #endif
 
+static ssize_t show_break_8021d(struct device *d,
+				struct device_attribute *attr,
+				char *buf)
+{
+	return sprintf(buf, "%x\n", to_bridge(d)->break_8021d);
+}
+
+static ssize_t store_break_8021d(struct device *d,
+				 struct device_attribute *attr,
+				 const char *buf, size_t len)
+{
+	struct net_bridge *br = to_bridge(d);
+
+	spin_lock_bh(&br->lock);
+	switch (buf[0]) {
+	case '1':
+		br->break_8021d = 1;
+		break;
+	case '0':
+		br->break_8021d = 0;
+		break;
+	}
+
+	spin_unlock_bh(&br->lock);
+	return len;
+}
+
+static DEVICE_ATTR(break_8021d, S_IRUGO | S_IWUSR,
+		   show_break_8021d, store_break_8021d);
+
 static struct attribute *bridge_attrs[] = {
 	&dev_attr_forward_delay.attr,
 	&dev_attr_hello_time.attr,
@@ -880,6 +910,7 @@ static struct attribute *bridge_attrs[] 
 	&dev_attr_default_pvid.attr,
 	&dev_attr_vlan_stats_enabled.attr,
 #endif
+	&dev_attr_break_8021d.attr,
 	NULL
 };
 
